add_executable(td_aircraft_state_input              "td_aircraft_state_input.cpp")
add_executable(td_cache_input                       "td_cache_input.cpp")
add_executable(td_command_reposition                "td_command_reposition.cpp")
add_executable(td_handle_waypoint                   "td_handle_waypoint.cpp")
add_executable(td_handover_control                  "td_handover_control.cpp")
add_executable(td_landing_routine                   "td_landing_routine.cpp")
add_executable(td_landing                           "td_landing.cpp")
add_executable(td_lp_manager                        "td_lp_manager.cpp")
add_executable(td_lp_reposition                     "td_lp_reposition.cpp")
add_executable(td_mission_initialization            "td_mission_initialization.cpp")
add_executable(td_on_route                          "td_on_route.cpp")
add_executable(td_packet_builder_bool               "td_packet_builder_bool.cpp")
add_executable(td_packet_builder_boss               "td_packet_builder_boss.cpp")
# add_executable(td_packet_builder_boss_temp          "td_packet_builder_boss_temp.cpp") # debug
add_executable(td_packet_builder_gcs                "td_packet_builder_gcs.cpp")
add_executable(td_packet_builder_landing_point      "td_packet_builder_landing_point.cpp")
# add_executable(td_packet_builder_landing_point_temp      "td_packet_builder_landing_point_temp.cpp") # debug
add_executable(td_polling_condition_input_landing   "td_polling_condition_input_landing.cpp")
add_executable(td_polling_condition_input_takeover  "td_polling_condition_input_takeover.cpp")
add_executable(td_polling_condition_input_test      "td_polling_condition_input_test.cpp")
add_executable(td_reposition_timer                  "td_reposition_timer.cpp")
add_executable(td_rudp_output_mavnrc                "td_rudp_output_mavnrc.cpp")
add_executable(td_stabilize                         "td_stabilize.cpp")
add_executable(td_supervisor                        "td_supervisor.cpp")
add_executable(td_supervisor_udp_input              "td_supervisor_udp_input.cpp")
add_executable(td_takeoff                           "td_takeoff.cpp")
add_executable(td_udp_input_async                   "td_udp_input_async.cpp")
add_executable(td_udp_input                         "td_udp_input.cpp")
add_executable(td_udp_output_boss                   "td_udp_output_boss.cpp")
add_executable(td_udp_output_fcc                    "td_udp_output_fcc.cpp")
add_executable(td_udp_output_gcs                    "td_udp_output_gcs.cpp")

target_compile_definitions(td_aircraft_state_input              PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_polling_condition_input_landing   PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_polling_condition_input_takeover  PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_rudp_output_mavnrc                PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_supervisor_udp_input              PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_udp_input_async                   PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_udp_input                         PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_udp_output_boss                   PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_udp_output_fcc                    PUBLIC RT_LINUX RT_DEVS)
target_compile_definitions(td_udp_output_gcs                    PUBLIC RT_LINUX RT_DEVS)

target_sources(td_aircraft_state_input              PRIVATE "${CMAKE_SOURCE_DIR}/src" "${SHARED_MEM}")
target_sources(td_cache_input                       PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_command_reposition                PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_handle_waypoint                   PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_handover_control                  PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_landing                           PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_landing_routine                   PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_lp_manager                        PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_lp_reposition                     PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_mission_initialization            PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_on_route                          PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_packet_builder_bool               PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_packet_builder_boss               PRIVATE "${CMAKE_SOURCE_DIR}/src")
# target_sources(td_packet_builder_boss_temp          PRIVATE "${CMAKE_SOURCE_DIR}/src") # debug
target_sources(td_packet_builder_gcs                PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_packet_builder_landing_point      PRIVATE "${CMAKE_SOURCE_DIR}/src")
# target_sources(td_packet_builder_landing_point_temp      PRIVATE "${CMAKE_SOURCE_DIR}/src") # debug
target_sources(td_polling_condition_input_landing   PRIVATE "${CMAKE_SOURCE_DIR}/src" "${SHARED_MEM}")
target_sources(td_polling_condition_input_takeover  PRIVATE "${CMAKE_SOURCE_DIR}/src" "${SHARED_MEM}")
target_sources(td_polling_condition_input_test      PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_reposition_timer                  PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_rudp_output_mavnrc                PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_stabilize                         PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_supervisor                        PRIVATE "${CMAKE_SOURCE_DIR}/src" "${MavNRC_GEO}")
target_sources(td_supervisor_udp_input              PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_takeoff                           PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_udp_input_async                   PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_udp_input                         PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_udp_output_boss                   PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_udp_output_fcc                    PRIVATE "${CMAKE_SOURCE_DIR}/src")
target_sources(td_udp_output_gcs                    PRIVATE "${CMAKE_SOURCE_DIR}/src")

target_include_directories(td_aircraft_state_input              PUBLIC ${includes_list})
target_include_directories(td_cache_input                       PUBLIC ${includes_list})
target_include_directories(td_command_reposition                PUBLIC ${includes_list})
target_include_directories(td_handle_waypoint                   PUBLIC ${includes_list})
target_include_directories(td_handover_control                  PUBLIC ${includes_list})
target_include_directories(td_landing                           PUBLIC ${includes_list})
target_include_directories(td_landing_routine                   PUBLIC ${includes_list})
target_include_directories(td_lp_manager                        PUBLIC ${includes_list})
target_include_directories(td_lp_reposition                     PUBLIC ${includes_list})
target_include_directories(td_mission_initialization            PUBLIC ${includes_list})
target_include_directories(td_on_route                          PUBLIC ${includes_list})
target_include_directories(td_packet_builder_bool               PUBLIC ${includes_list})
target_include_directories(td_packet_builder_boss               PUBLIC ${includes_list})
# target_include_directories(td_packet_builder_boss_temp          PUBLIC ${includes_list}) # debug
target_include_directories(td_packet_builder_gcs                PUBLIC ${includes_list})
target_include_directories(td_packet_builder_landing_point      PUBLIC ${includes_list})
# target_include_directories(td_packet_builder_landing_point_temp      PUBLIC ${includes_list}) # debug
target_include_directories(td_polling_condition_input_landing   PUBLIC ${includes_list})
target_include_directories(td_polling_condition_input_takeover  PUBLIC ${includes_list})
target_include_directories(td_polling_condition_input_test      PUBLIC ${includes_list})
target_include_directories(td_reposition_timer                  PUBLIC ${includes_list})
target_include_directories(td_rudp_output_mavnrc                PUBLIC ${includes_list})
target_include_directories(td_stabilize                         PUBLIC ${includes_list})
target_include_directories(td_supervisor                        PUBLIC ${includes_list})
target_include_directories(td_supervisor_udp_input              PUBLIC ${includes_list})
target_include_directories(td_takeoff                           PUBLIC ${includes_list})
target_include_directories(td_udp_input_async                   PUBLIC ${includes_list})
target_include_directories(td_udp_input                         PUBLIC ${includes_list})
target_include_directories(td_udp_output_boss                   PUBLIC ${includes_list})
target_include_directories(td_udp_output_fcc                    PUBLIC ${includes_list})
target_include_directories(td_udp_output_gcs                    PUBLIC ${includes_list})

target_link_libraries(td_aircraft_state_input               ${Boost_LIBRARIES})
target_link_libraries(td_cache_input                        ${Boost_LIBRARIES})
target_link_libraries(td_command_reposition                 ${Boost_LIBRARIES})
target_link_libraries(td_handle_waypoint                    ${Boost_LIBRARIES})
target_link_libraries(td_handover_control                   ${Boost_LIBRARIES})
target_link_libraries(td_landing                            ${Boost_LIBRARIES})
target_link_libraries(td_landing_routine                    ${Boost_LIBRARIES})
target_link_libraries(td_lp_manager                         ${Boost_LIBRARIES})
target_link_libraries(td_lp_reposition                      ${Boost_LIBRARIES})
target_link_libraries(td_mission_initialization             ${Boost_LIBRARIES})
target_link_libraries(td_on_route                           ${Boost_LIBRARIES})
target_link_libraries(td_packet_builder_bool                ${Boost_LIBRARIES})
target_link_libraries(td_packet_builder_boss                ${Boost_LIBRARIES})
# target_link_libraries(td_packet_builder_boss_temp           ${Boost_LIBRARIES}) # debug
target_link_libraries(td_packet_builder_gcs                 ${Boost_LIBRARIES})
target_link_libraries(td_packet_builder_landing_point       ${Boost_LIBRARIES})
# target_link_libraries(td_packet_builder_landing_point_temp       ${Boost_LIBRARIES}) # debug
target_link_libraries(td_polling_condition_input_landing    ${Boost_LIBRARIES})
target_link_libraries(td_polling_condition_input_takeover   ${Boost_LIBRARIES})
target_link_libraries(td_polling_condition_input_test       ${Boost_LIBRARIES})
target_link_libraries(td_reposition_timer                   ${Boost_LIBRARIES})
target_link_libraries(td_rudp_output_mavnrc                 ${Boost_LIBRARIES} ${rudp_LIBRARY})
target_link_libraries(td_stabilize                          ${Boost_LIBRARIES})
target_link_libraries(td_supervisor                         ${Boost_LIBRARIES})
target_link_libraries(td_supervisor_udp_input               ${Boost_LIBRARIES} ${rudp_LIBRARY})
target_link_libraries(td_takeoff                            ${Boost_LIBRARIES})
target_link_libraries(td_udp_input                          ${Boost_LIBRARIES})
target_link_libraries(td_udp_input_async                    ${Boost_LIBRARIES})
target_link_libraries(td_udp_output_boss                    ${Boost_LIBRARIES})
target_link_libraries(td_udp_output_fcc                     ${Boost_LIBRARIES})
target_link_libraries(td_udp_output_gcs                     ${Boost_LIBRARIES})

if (UNIX AND NOT APPLE)
    target_link_libraries(td_aircraft_state_input               -lrt)
    target_link_libraries(td_polling_condition_input_landing    -lrt)
    target_link_libraries(td_polling_condition_input_takeover   -lrt)
endif ()
